legend("topleft", cex =0.75, lty=1, col=c(1,"blue","red","green", "purple", "brown"),
c("data", expression(alpha == 0.2), expression(alpha == 0.6),
expression(alpha == 0.89),"Holt","Exponential"),pch=1)
air <- window(ausair,start=1990,end=2004)
fit0 <- ses(air, alpha = 0.8, beta = 0.2,initial = "simple", h=5)
fit1 <- holt(air, alpha=0.8, beta=0.2, initial="simple", h=5)
fit2 <- holt(air,alpha=0.8,beta=0.2,initial="simple",exponential=TRUE,h=5)
fit3 <- holt(air, alpha=0.8, beta=0.2, damped=TRUE, h=5)
fit4 <- holt(air, alpha=0.8, beta=0.2, damped=TRUE, exponential = TRUE, h=5)
# Results for first model:
fit1$model$state
fitted(fit1)
fit1$mean
plot(fit2$model$state)
plot(fit2, type="o", ylab="Air passengers in Australia (millions)",
xlab="Year", fcol="white", PI=FALSE)
lines(fitted(fit0), col="brown")
lines(fitted(fit1), col="blue")
lines(fitted(fit2), col="gold")
lines(fitted(fit3), col="green")
lines(fitted(fit4), col="purple")
lines(fit0$mean, col="brown", type="o")
lines(fit1$mean, col="blue", type="o")
lines(fit2$mean, col="gold", type="o")
lines(fit3$mean, col="green", type="o")
lines(fit4$mean, col="purple", type="o")
legend("topleft", lty=1, cex=0.6, col=c("black","brown","blue","gold","green", "purple"),
c("Data","SES", "Holt","Exponent","Additive damped trend", "Mult damped trend"))
livestock2 <- window(livestock,start=1970,end=2000)
fit1 <- holt(livestock2,alpha = 0.8, beta = .1)
fit2 <- holt(livestock2, alpha = .6, beta = .1)
fit3 <- holt(livestock2,alpha = .4, beta = .1)
plot(fit3, type="o", ylab="Livestock, sheep in Asia (millions)", ylim = c(250, 475),
flwd=1, PI=FALSE, xlab = "beta = 0.1")
lines(window(livestock,start=2001),type="o")
lines(fit1$mean,col=2)
lines(fit2$mean,col=3)
legend("topleft", cex = 0.75, lty=1, pch=1, col=1:4,
c("Data","Alpha = 0.8","Alpha = 0.4","Alpha = 0.2"))
livestock2 <- window(livestock,start=1970,end=2000)
fit1 <- holt(livestock2,alpha = 0.8, beta = .1)
fit2 <- holt(livestock2, alpha = .8, beta = .5)
fit3 <- holt(livestock2,alpha = .8, beta = .7)
plot(fit3, type="o", ylab="Livestock, sheep in Asia (millions)", ylim = c(250, 475),
flwd=1, PI=FALSE, xlab = "alpha = .8")
lines(window(livestock,start=2001),type="o")
lines(fit1$mean,col=2)
lines(fit2$mean,col=3)
legend("topleft", cex = 0.75, lty=1, pch=1, col=1:4,
c("Data","Beta = 0.1","Beta = 0.5","Beta = 0.7"))
aust <- window(austourists,start=2005)
fit1hw <- hw(aust,seasonal="additive")
fit2hw <- hw(aust,seasonal="multiplicative")
fit3hw <- hw(aust,seasonal="multiplicative", damped = TRUE)
plot(fit2hw,ylab="International visitor night in Australia (millions)",
PI=FALSE, type="o", fcol="white", xlab="Year")
lines(fitted(fit1hw), col="red", lty=2)
lines(fitted(fit2hw), col="green", lty=2)
lines(fit1hw$mean, type="o", col="red")
lines(fit2hw$mean, type="o", col="green")
legend("topleft",lty=1, cex = 0.75, pch=1, col=1:3,
c("data","Holt Winters' Additive","Holt Winters' Multiplicative"))
states <- cbind(fit1hw$model$states[,1:3],fit2hw$model$states[,1:3])
colnames(states) <- c("level","slope","seasonal","level","slope","seasonal")
plot(states, xlab="Year", main = "Comparing Additive and Multiplicative Seasonals")
require(forecast)
# Simple exponential smoothing - code from the FPP book
oildata <- window(oil, start = 1996, end = 2007)
plot(oildata, ylab = "Oil (millions of tonnes)", xlab = "Year")
fit1 <- ses(oildata, alpha = 0.2, initial = "simple", h = 3)
fit2 <- ses(oildata, alpha = 0.6, initial = "simple", h = 3)
fit3 <- ses(oildata, h = 3) #note no value for alpha and no initial value.  The algorithm will calculate alpha as part of the optimization.
#what kind of objects are these?
class(fit3)
#what is in them
summary(fit3)
require(forecast)
# Simple exponential smoothing - code from the FPP book
oildata <- window(oil, start = 1996, end = 2007)
require(forecast)
require(fpp)
# Simple exponential smoothing - code from the FPP book
oildata <- window(oil, start = 1996, end = 2007)
plot(oildata, ylab = "Oil (millions of tonnes)", xlab = "Year")
fit1 <- ses(oildata, alpha = 0.2, initial = "simple", h = 3)
fit2 <- ses(oildata, alpha = 0.6, initial = "simple", h = 3)
fit3 <- ses(oildata, h = 3) #note no value for alpha and no initial value.  The algorithm will calculate alpha as part of the optimization.
#what kind of objects are these?
class(fit3)
#what is in them
summary(fit3)
plot(fit1, PI=FALSE, ylab="Oil (millions of tonnes)",
xlab="Year", main="", fcol="white", type="o")
lines(fitted(fit1), col="blue", type="o")
lines(fitted(fit2), col="red", type="o")
lines(fitted(fit3), col="green", type="o")
legend("topleft",lty=1, col=c(1,"blue","red","green"), cex = 0.75,
c("data", expression(alpha == 0.2), expression(alpha == 0.6),
expression(alpha == 0.89)),pch=1)
knitr::opts_chunk$set(echo = TRUE, cache=TRUE)
library(fpp2)
install.packages("fpp2")
knitr::opts_chunk$set(echo = TRUE, cache=TRUE)
library(fpp2)
options(width=60)
fit <- stl(elecequip, s.window=7)
autoplot(fit) + xlab("Year")
ggsubseriesplot(seasonal(fit))
install.packages("seasonal")
elecequip %>% stlf(method='naive') %>%
autoplot() + ylab("New orders index") + xlab("Year")
autoplot(elecequip, series="Data") +
autolayer(trendcycle(fit), series="Trend-cycle")
autoplot(elecequip, series="Data") +
autolayer(seasadj(fit), series="Seasonally Adjusted") +
xlab("Year") + ylab("New orders index") +
ggtitle("Electrical equipment manufacturing (Euro area)") +
scale_colour_manual(values=c("gray","blue"),
breaks=c("Data","Seasonally Adjusted"))
fit <- stl(elecequip, s.window=7)
autoplot(elecequip, series="Data") +
autolayer(seasadj(fit), series="Seasonally Adjusted")
autoplot(elecequip, series="Data") +
autolayer(seasadj(fit), series="Seasonally Adjusted") +
xlab("Year") + ylab("New orders index") +
ggtitle("Electrical equipment manufacturing (Euro area)") +
scale_colour_manual(values=c("gray","blue"),
breaks=c("Data","Seasonally Adjusted"))
x <- ts(c(5985.7,6040.6,6054.2,6038.3,6031.3,6036.1,6005.4,6024.3,6045.9,6033.8,6125.4,5971.3,
6050.7,6096.2,6087.7,6075.6,6095.7,6103.9,6078.5,6157.8,6164.0,6188.8,6257.2,6112.9,
6207.2,6278.7,6224.9,6273.4,6269.9,6314.1,6281.4,6360.0,6320.2,6342.0,6426.6,6253.0,
6356.5,6428.1,6426.3,6412.4,6413.9,6425.3,6393.7,6502.7,6445.3,6433.3,6506.9,6355.5,
6432.4,6497.4,6431.6,6440.9,6414.3,6425.9,6379.3,6443.5,6421.1,6366.8,6370.1,6172.0,
6263.9,6310.3,6254.5,6272.8,6266.5,6295.0,6241.2,6358.2,6336.1,6377.5,6456.5,6251.4,
6365.4,6503.2,6477.6,6489.7,6499.0,6528.7,6466.1,6579.8,6553.2,6576.1,6636.0,6452.4,
6595.7,6657.4,6588.8,6657.9,6659.4,6703.4,6675.5,6814.7,6771.1,6881.9,6910.8,6753.6,
6861.9,6961.9,6997.9,6979.0,7007.7,6991.5,6918.5,7040.6,7030.4,7034.2,7116.8,6902.5,
7022.3,7133.4,7109.6,7103.5,7128.9,7175.6,7092.3,7186.5,7177.4,7182.2,7330.7,7169.4,
7247.3,7397.4,7383.4,7354.8,7378.3,7383.1,7353.3,7503.2,7477.3,7508.6,7622.9,7423.8,
7566.5,7634.6,7678.4,7720.8,7711.0,7740.8,7715.3,7841.6,7806.5,7862.4,7935.5,7707.7,
7803.0,7874.1,7887.9,7908.5,7900.3,7919.4,7808.0,7905.5,7848.9,7826.9,7915.5,7641.3,
7708.7,7715.4,7717.2,7703.7,7678.1,7583.0,7620.7,7713.2,7638.0,7614.9,7712.2,7518.9,
7597.2,7646.2,7644.1,7631.4,7637.3,7668.3,7613.4,7709.7,7665.7,7587.4,7693.4,7533.7,
7531.0,7645.7,7572.6,7620.5,7627.9,7646.5,7589.4,7747.6,7738.8,7744.9,7842.1,7646.8,
7738.6,7824.2,7827.4,7857.9,7878.4,7966.0,7861.7,8054.4,7997.2,8003.3,8135.5,7928.4,
8049.9,8118.1,8174.6,8165.2,8205.6,8229.0,8165.9,8300.4,8232.6,8300.3,8395.7,8166.7,
8246.6,8280.4,8248.0,8297.1,8311.7,8332.1,8265.9,8373.0,8319.4,8314.4,8431.4,8235.2,
8291.4,8347.5,8343.1,8330.2,8345.6,8374.9,8250.3,8474.0,8405.2,8462.1,8540.5,8334.7,
8413.0,8460.0,8499.9,8482.5,8516.8,8541.9,8455.2,8653.2,8601.0,8554.3,8696.5,8477.4,
8556.5,8618.9,8631.9,8606.5,8673.2,8706.7,8603.6,8777.1,8755.3,8763.7,8900.7,8628.2,
8754.4,8830.7,8882.2,8865.0,8922.0,9020.0,8911.6,9061.3,8973.1,8912.7,9059.6,8834.9,
8920.9,8956.0,9023.6,9004.6,9021.9,9048.9,8971.9,9105.9,9058.7,9055.6,9177.1,8993.4,
9092.3,9128.5,9129.5,9134.7,9180.8,9194.5,9150.3,9303.5,9249.1,9286.7,9439.7,9281.7,
9372.6,9362.1,9365.6,9380.1,9370.4,9363.9,9327.0,9486.1,9447.8,9427.7,9573.6,9363.8,
9434.5,9506.4,9512.0,9533.5,9543.3,9553.1,9462.1,9668.6,9662.2,9652.9,9807.8,9634.4,
9744.6,9828.3,9856.3,9850.8,9896.6,9912.3,9870.3,10004.6,9949.7,9945.0,10074.7,9842.7,
9961.1,10048.7,10041.0,10082.1,10120.8,10170.8,10105.8,10299.5,10212.4,10201.6,10404.3,
10156.1,10277.0,10349.2,10362.9,10412.0,10436.3,10456.8,10406.4,10588.8,10520.5,10535.0,
10710.1,10524.9,10622.9,10677.4,10706.2,10690.3,10745.0,10761.9,10710.4,10854.5,10807.4,
10757.3,10915.6,10681.0,10776.7,10775.2,10792.7,10786.8,10770.9,10808.8,10707.3,10882.1,
10845.2,10829.2,11010.9,10809.9,10889.2,10928.9,10940.1,10957.4,11009.3,11030.5,10973.8,
11159.4,11129.0,11144.5,11295.0,11063.7,11146.2,11217.0,11186.5,11196.2,11221.3,11227.5,
11130.7,11321.2,11274.0,11240.6,11354.8,11159.0,11236.2,11332.4,11328.3,11389.0,11350.6,
11363.7,11259.8,11452.6,11401.9,11375.0,11518.4,11304.0,11424.3,11436.3,11482.2,11495.6,
11497.8,11486,11369,11547,11499,11472,11571,11354,11493,11562,11589,11595,11602,11590,
11622,11593), freq=12, start=c(1978,2))
autoplot(x) +
ggtitle("Total employed") +
ylab("Thousands") + xlab("Year")
autoplot(window(x, start=c(2005,1))) +
ggtitle("Total employed") +
ylab("Thousands") + xlab("Year")
ggseasonplot(window(x,start=c(2005,1)), year.labels=TRUE) +
ggtitle("Total employed") + ylab("Thousands")
aug <- x[seq(7,440,by=12)]
sep <- x[seq(8,440,by=12)]
ggplot(data.frame(diff=sep-aug, x=rep(1,length(aug)))) +
geom_boxplot(aes(y=diff,x=1)) + coord_flip() +
ggtitle("Sep - Aug: total employed") + xlab("") + ylab("Thousands") +
scale_x_continuous(breaks=NULL, labels=NULL)
x %>% window(start=2009) %>%
stl(s.window=11, robust=TRUE) -> fit
autoplot(fit)
ggseasonplot(window(fit$time.series[,'seasonal'],start=2013,end=2013.999),
year.labels=FALSE) +
ggtitle("Seasonal component") +
guides(colour="none")
autoplot(seasadj(fit))
library(seasonal)
fit <- seas(elecequip, x11="")
autoplot(fit) +
ggtitle("X11 decomposition of electrical equipment index")
library(seasonal)
fit <- seas(elecequip)
autoplot(fit) +
ggtitle("SEATS decomposition of electrical equipment index")
autoplot(elecequip, series="Data") +
autolayer(trendcycle(fit), series="Trend") +
autolayer(seasadj(fit), series="Seasonally Adjusted") +
xlab("Year") + ylab("New orders index") +
ggtitle("Electrical equipment manufacturing (Euro area)") +
scale_colour_manual(values=c("gray","blue","red"),
breaks=c("Data","Seasonally Adjusted","Trend"))
ggsubseriesplot(seasonal(fit)) + ylab("Seasonal")
fit <- stl(elecequip, s.window=5, robust=TRUE)
autoplot(fit) +
ggtitle("STL decomposition of electrical equipment index")
fit <- stl(elecequip, s.window="periodic", robust=TRUE)
autoplot(fit) +
ggtitle("STL decomposition of electrical equipment index")
elecequip %>% mstl() %>% autoplot()
fit <- stl(elecequip, t.window=13, s.window="periodic")
fit %>% seasadj() %>% naive() %>%
autoplot() + ylab("New orders index") +
ggtitle("ETS forecasts of seasonally adjusted data")
fit %>% forecast(method='naive') %>%
autoplot() + ylab("New orders index") + xlab("Year")
knitr::opts_chunk$set(echo = TRUE, cache=TRUE)
library(fpp2)
options(width=60)
require(forecast)
require(fpp2)
# Simple exponential smoothing - code from the FPP book
oildata <- window(oil, start = 1996, end = 2007)
plot(oildata, ylab = "Oil (millions of tonnes)", xlab = "Year")
fit1 <- ses(oildata, alpha = 0.2, initial = "simple", h = 3)
fit2 <- ses(oildata, alpha = 0.6, initial = "simple", h = 3)
fit3 <- ses(oildata, h = 3) #note no value for alpha and no initial value.  The algorithm will calculate alpha as part of the optimization.
#what kind of objects are these?
class(fit3)
#what is in them
summary(fit3)
elecequip %>%
stl(s.window=7, t.window=11) %>%
autoplot()
library(seasonal)
fit <- seas(elecequip, x11="")
autoplot(fit)
autoplot(elecsales) + xlab("Year") + ylab("GWh") +
ggtitle("Annual electricity sales: South Australia")
ma(elecsales, 5)
autoplot(elecsales, series="Data") +
autolayer(ma(elecsales,5), series="5-MA") +
xlab("Year") + ylab("GWh") +
ggtitle("Annual electricity sales: South Australia") +
scale_colour_manual(values=c("Data"="grey50","5-MA"="red"),
breaks=c("Data","5-MA"))
#Setting of periods to average
ma(elecsales, 5)
autoplot(elecsales, series="Data") +
autolayer(ma(elecsales,5), series="5-MA") +
xlab("Year") + ylab("GWh") +
ggtitle("Annual electricity sales: South Australia") +
scale_colour_manual(values=c("Data"="grey50","5-MA"="red"),
breaks=c("Data","5-MA"))
accuracy(ma(elecsales, 5))
x<-autoplot(elecsales, series="Data") +
autolayer(ma(elecsales,5), series="5-MA") +
xlab("Year") + ylab("GWh") +
ggtitle("Annual electricity sales: South Australia") +
scale_colour_manual(values=c("Data"="grey50","5-MA"="red"),
breaks=c("Data","5-MA"))
summary(x)
x<-autoplot(elecsales, series="Data") +
autolayer(ma(elecsales,5), series="5-MA") +
xlab("Year") + ylab("GWh") +
ggtitle("Annual electricity sales: South Australia") +
scale_colour_manual(values=c("Data"="grey50","5-MA"="red"),
breaks=c("Data","5-MA"))
accuracy(x)
x<-autoplot(elecsales, series="Data") +
autolayer(ma(elecsales,5), series="5-MA") +
xlab("Year") + ylab("GWh") +
ggtitle("Annual electricity sales: South Australia") +
scale_colour_manual(values=c("Data"="grey50","5-MA"="red"),
breaks=c("Data","5-MA"))
elecequip %>% decompose(type="multiplicative") %>%
autoplot() + xlab("Year") +
ggtitle("Classical multiplicative decomposition
of electrical equipment index")
knitr::opts_chunk$set(echo = TRUE, cache=TRUE)
library(fpp2)
options(width=60)
fit %>% forecast(method='naive') %>%
autoplot() + ylab("New orders index") + xlab("Year")
fit %>% forecast(method='naive') %>%
autoplot() + ylab("New orders index") + xlab("Year")
fit %>% forecast(method='naive') %>%
autoplot() + ylab("New orders index") + xlab("Year")
x<-fit %>% forecast(method='naive') %>%
autoplot() + ylab("New orders index") + xlab("Year")
x<-fit %>% forecast(method='naive') %>%
autoplot() + ylab("New orders index") + xlab("Year")
fit %>% forecast(method='naive') %>%
autoplot() + ylab("New orders index") + xlab("Year")
fit %>% forecast(method='naive') %>%
autoplot() + ylab("New orders index") + xlab("Year")
fit %>% forecast(method='naive') %>%
autoplot() + ylab("New orders index") + xlab("Year")
forecast(object, method = c("ets", "arima", "naive", "rwdrift"),
etsmodel = "ZZN", forecastfunction = NULL,
h = frequency(object$time.series) * 2, level = c(80, 95), fan = FALSE,
lambda = NULL, biasadj = NULL, xreg = NULL, newxreg = NULL,
allow.multiplicative.trend = FALSE, ...)
forecast(elecequip, method = c("ets", "arima", "naive", "rwdrift"),
etsmodel = "ZZN", forecastfunction = NULL,
h = frequency(object$time.series) * 2, level = c(80, 95), fan = FALSE,
lambda = NULL, biasadj = NULL, xreg = NULL, newxreg = NULL,
allow.multiplicative.trend = FALSE, ...)
elecequip
stl(elecequip,s.window=5)
stl(elecequip, t.window=15,
s.window="periodic", robust=TRUE)
elecequip %>% stlf(method='naive') %>%
autoplot() + ylab("New orders index") + xlab("Year")
fit %>% forecast(method = c("ets", "arima", "naive", "rwdrift")) %>%
autoplot() + ylab("New orders index") + xlab("Year")
fit %>% forecast(method = c("ets", "arima", "naive", "rwdrift")) %>%
autoplot() + ylab("New orders index") + xlab("Year")
elecequip %>% stlf(method='naive') %>%
autoplot(h=36) + ylab("New orders index") + xlab("Year")
autoplot(elecequip, series="Data", h=10) +
autolayer(trendcycle(fit), series="Trend") +
autolayer(seasadj(fit), series="Seasonally Adjusted") +
xlab("Year") + ylab("New orders index") +
ggtitle("Electrical equipment manufacturing (Euro area)") +
scale_colour_manual(values=c("gray","blue","red"),
breaks=c("Data","Seasonally Adjusted","Trend"))
autoplot(elecequip, series="Data") +
autolayer(trendcycle(fit), series="Trend") +
autolayer(seasadj(fit), series="Seasonally Adjusted") +
xlab("Year") + ylab("New orders index") +
ggtitle("Electrical equipment manufacturing (Euro area)") +
scale_colour_manual(values=c("gray","blue","red"),
breaks=c("Data","Seasonally Adjusted","Trend"))
fit <- stl(elecequip, t.window=13, s.window="periodic")
fit %>% seasadj() %>% naive() %>%
autoplot(h=36) + ylab("New orders index") +
ggtitle("ETS forecasts of seasonally adjusted data")
elecequip %>% stlf(method='naive') %>%
autoplot(h=36) + ylab("New orders index") + xlab("Year")
summary(elecequip %>% stlf(method='naive'))
fit %>% forecast(method='naive') %>%
autoplot() + ylab("New orders index") + xlab("Year")
fit %>% forecast(method='naive') %>%
autoplot() + ylab("New orders index") + xlab("Year")
summary(fit %>% forecast(method='naive'))
fit <- stl(elecequip, t.window=13, s.window="periodic")
fit %>% seasadj() %>% naive() %>%
autoplot(h=36) + ylab("New orders index") +
ggtitle("ETS forecasts of seasonally adjusted data")
summary(stl(elecequip, t.window=13, s.window="periodic")
fit %>% seasadj() %>% naive())
fit <- stl(elecequip, t.window=13, s.window="periodic")
fit %>% seasadj() %>% naive() %>%
autoplot(h=36) + ylab("New orders index") +
ggtitle("ETS forecasts of seasonally adjusted data")
summary(fit %>% seasadj() %>% naive() )
summary(fit %>% seasadj() %>% naive())
fit <- stl(elecequip, t.window=13, s.window="periodic")
fit %>% seasadj() %>% naive() %>%
autoplot(h=36) + ylab("New orders index") +
ggtitle("ETS forecasts of seasonally adjusted data")
summary(fit %>% stl() %>% naive() )
fit <- stl(elecequip, t.window=13, s.window="periodic")
fit %>% seasadj() %>% naive() %>%
autoplot(h=36) + ylab("New orders index") +
ggtitle("ETS forecasts of seasonally adjusted data")
summary(fit %>% seasadj() %>% naive())
fit <- stl(elecequip, t.window=13, s.window="periodic")
fit %>% seasadj() %>% naive() %>%
autoplot(h=36) + ylab("New orders index") +
ggtitle("ETS forecasts of seasonally adjusted data")
summary(fit %>% seasadj() %>% naive())
fit <- stl(elecequip, t.window=13, s.window="periodic")
fit %>% seasadj() %>% naive() %>%
autoplot(h=36) + ylab("New orders index") +
ggtitle("ETS forecasts of seasonally adjusted data")
library(ggplot2)
cars <- window(ukcars, start=1977)
autoplot(cars)
data(ukcars)
library(ggplot2)
cars <- window(ukcars, start=1977)
autoplot(cars)
data(ukcars)
library(ggplot2)
cars <- window(ukcars, start=1977)
ggplot(cars)
ukcars
cars <- window(ukcars, start=1977)
data(ukcars)
library(datasets)
data(ukcars)
install.packages("expsmooth")
library(expsmooth)
data(ukcars)
library(ggplot2)
cars <- window(ukcars, start=1977)
ggplot(cars) aes(x = date, y = value)) +
geom_line(aes(color = variable), size = 1) +
scale_color_manual(values = c("#00AFBB", "#E7B800")) +
theme_minimal()
cars
str(cars)
ggplot(cars)
class(cars)
library(zoo)
library(scales)
autoplot(as.zoo(cars), geom = "point")
autoplot(as.zoo(cars), geom = "line")
install.packages(c("dimRed", "DT", "ffbase", "ipred", "jomo", "lattice", "lintr", "ModelMetrics", "ps", "raster", "rcmdcheck", "Rcpp", "rgeos", "roxygen2", "rstan", "sessioninfo", "shinythemes", "spatstat", "xts"))
install.packages(c("dplyr", "lme4", "rstanarm"))
install.packages(c("rcmdcheck", "RcppArmadillo", "tables"))
install.packages(c("RcppArmadillo", "RJSONIO", "rsconnect"))
install.packages(c("recipes", "tseries"))
install.packages(c("caret", "tseries"))
day <- read.csv("~/Downloads/Bike-Sharing-Dataset/day.csv")
View(day)
autoplot(day)
library(ggplot2)
library(zoo)
autoplot(day)
autoplot.zoo(day)
install.packages(c("haven", "mgcv", "readr"))
library(tidyverse)
library(forecast)
library(fpp2)
wmurder %<% autoplot()
wmurder %>% autoplot()
wmurders %>% autoplot()
wmurders %>% acf()%>% pacf()
wmurders %>% acf() %>% pacf()
wmurders %>% pacf()
wmurders %>% pacf()
wmurders %>% diff() %>% acf()
wmurders %>% diff() %>% pacf()
wmurders %>% diff() %>% acf()
install.packages(c("lava", "mgcv", "RcppEigen", "rio", "sfsmisc", "survival"))
boxcox.inv(y, lambda)
install.packages("bimixt")
install.packages("bimixt")
install.packages("bimixt")
boxcox.inv(y, lambda)
install.packages("bimixt")
library("bimixt")
boxcox.inv(y, lambda)
boxcox.inv(10, lambda)
boxcox.inv(10, .4)
knitr::opts_chunk$set(echo = FALSE, cache=TRUE, warning=FALSE, message=FALSE)
library(fpp2)
source("nicefigs.R")
bootseries <- bld.mbb.bootstrap(debitcards, 10) %>%
as.data.frame() %>% ts(start=2000, frequency=12)
autoplot(debitcards) +
autolayer(bootseries, colour=TRUE) +
autolayer(debitcards, colour=FALSE) +
ylab("Bootstrapped series") + guides(colour="none")
sim <- bld.mbb.bootstrap(debitcards, 10) %>%
as.data.frame() %>%
ts(frequency=12, start=2000)
fc <- purrr::map(as.list(sim),
function(x){forecast(ets(x))[["mean"]]}) %>%
as.data.frame() %>%
ts(frequency=12, start=start)
etsfc <- debitcards %>% ets() %>% forecast(h=36)
baggedfc <- debitcards %>% baggedETS() %>% forecast(h=36)
autoplot(debitcards) +
autolayer(baggedfc, series="BaggedETS", PI=FALSE) +
autolayer(etsfc, series="ETS", PI=FALSE) +
guides(colour=guide_legend(title="Forecasts"))
sim <- bld.mbb.bootstrap(debitcards, 10) %>%
as.data.frame() %>%
ts(frequency=12, start=2000)
fc <- purrr::map(as.list(sim),
function(x){forecast(ets(x))[["mean"]]}) %>%
as.data.frame() %>%
ts(frequency=12, start=start)
nsim <- 1000L
sim <- bld.mbb.bootstrap(debitcards, nsim)
h <- 36L
future <- matrix(0, nrow=nsim, ncol=h)
for(i in seq(nsim))
future[i,] <- simulate(ets(sim[[i]]), nsim=h)
start <- tsp(debitcards)[2]+1/12
simfc <- structure(list(
mean = ts(colMeans(future), start=start, frequency=12),
lower = ts(apply(future, 2, quantile, prob=0.025),
start=start, frequency=12),
upper = ts(apply(future, 2, quantile, prob=0.975),
start=start, frequency=12),
level=95),
class="forecast")
etsfc <- forecast(ets(debitcards), h=h, level=95)
autoplot(debitcards) +
ggtitle("Monthly retail debit card usage in Iceland") +
xlab("Year") + ylab("million ISK") +
autolayer(simfc, series="Simulated") +
autolayer(etsfc, series="ETS")
setwd(/Users/mylesgartland/OneDrive - Rockhurst University/Courses/Forecasting/Time Series/time_series/time_series/Week 8)
setwd("/Users/mylesgartland/OneDrive - Rockhurst University/Courses/Forecasting/Time Series/time_series/time_series/Week 8")
knitr::opts_chunk$set(echo = FALSE, cache=TRUE, warning=FALSE, message=FALSE)
library(fpp2)
#source("nicefigs.R")
telec <- read.csv("data/turkey_elec.csv")
setwd("/Users/mylesgartland/OneDrive - Rockhurst University/Courses/Forecasting/Time Series/time_series/time_series/Week 8")
telec <- read.csv("Data/turkey_elec.csv")
telec <- msts(telec/1e3, start=2000, seasonal.periods = c(7,354.37,365.25))
autoplot(telec) +
ggtitle("Turkish daily electricity demand") +
xlab("Year") + ylab("Electricity Demand (GW)")
telec %>% tbats() %>% forecast() %>% autoplot()

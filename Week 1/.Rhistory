pricelag = lag(ciscots, k=-1);
library(tseries)
library(zoo)
#import dataset into a dataframe
setwd("/Users/mylesgartland/OneDrive - Rockhurst University/Courses/Forecasting/Time Series/time_series/time_series/Week 1")
cisco = read.table('Data/cisco_00-10.csv', header=T, sep=',')
# create time series for cisco prices
ciscots = zoo(cisco$Price, as.Date(as.character(cisco$Date), format = "%m/%d/%y"))
#To retrieve only dates use
head(time(ciscots))
# Retrieve start date
start(ciscots)
# Retrieve End date
end(ciscots)
# create lagged series using function lag(tsobject, k==1);
pricelag = lag(ciscots, k=-1);
head(pricelag)
# diff = p_t - p_(t-1);
pricedif = diff(ciscots);
#compute simple returns ret = (p_t-p_(t-1))/p_(t-1)
ret=(ciscots-pricelag)/pricelag
head(ret)
# sort data in chronological order
# set variable Date as time/date variable
cisco$Date=as.Date(as.character(cisco$Date), format = "%m/%d/%y")
cisco=cisco[order(cisco$Date),]
head(cisco)
#DEFINE LOG RETURNS
#rts is a time series object since it is created from a TS object
rts = diff(log(ciscots))
#to retrieve numerical values from time series use coredata()
# rt is a numerical vector (no date information)
rt=coredata(rts)
#print first 6 values
head(rt)
#DEFINE LOG RETURNS
#rts is a time series object since it is created from a TS object
rts = diff(log(ciscots))
head(rts)
#to retrieve numerical values from time series use coredata()
# rt is a numerical vector (no date information)
rt=coredata(rts)
#print first 6 values
head(rt)
#DEFINE LOG RETURNS
#rts is a time series object since it is created from a TS object
rts = diff(log(ciscots))
print("Log Return")
head(rts)
#to retrieve numerical values from time series use coredata()
# rt is a numerical vector (no date information)
rt=coredata(rts)
#print first 6 values
head(rt)
#DEFINE LOG RETURNS
#rts is a time series object since it is created from a TS object
rts = diff(log(ciscots))
print("Log Return")
head(rts)
print("")
#to retrieve numerical values from time series use coredata()
# rt is a numerical vector (no date information)
rt=coredata(rts)
#print first 6 values
head(rt)
#DEFINE LOG RETURNS
#rts is a time series object since it is created from a TS object
rts = diff(log(ciscots))
print("Log Return")
head(rts)
print()
#DEFINE LOG RETURNS
#rts is a time series object since it is created from a TS object
rts = diff(log(ciscots))
print("Log Return")
head(rts)
print("")
#to retrieve numerical values from time series use coredata()
# rt is a numerical vector (no date information)
rt=coredata(rts)
#print first 6 values
head(rt)
#DEFINE LOG RETURNS
#rts is a time series object since it is created from a TS object
rts = diff(log(ciscots))
print("Log Return")
head(rts)
print("")
#to retrieve numerical values from time series use coredata()
# rt is a numerical vector (no date information)
print("coredata")
rt=coredata(rts)
#print first 6 values
head(rt)
library(tseries)
library(zoo)
#import dataset into a dataframe
setwd("/Users/mylesgartland/OneDrive - Rockhurst University/Courses/Forecasting/Time Series/time_series/time_series/Week 1")
cisco = read.table('Data/cisco_00-10.csv', header=T, sep=',')
# create time series for cisco prices
ciscots = zoo(cisco$Price, as.Date(as.character(cisco$Date), format = "%Y-%m-%d"))
#To retrieve only dates use
head(time(ciscots))
# Retrieve start date
start(ciscots)
# Retrieve End date
end(ciscots)
library(tseries)
library(zoo)
#import dataset into a dataframe
setwd("/Users/mylesgartland/OneDrive - Rockhurst University/Courses/Forecasting/Time Series/time_series/time_series/Week 1")
cisco = read.table('Data/cisco_00-10.csv', header=T, sep=',')
# create time series for cisco prices
ciscots = zoo(cisco$Price, as.Date(as.character(cisco$Date), format = "%m/%d/%y"))
#To retrieve only dates use
head(time(ciscots))
# Retrieve start date
start(ciscots)
# Retrieve End date
end(ciscots)
View(cisco)
library(tseries)
library(zoo)
#import dataset into a dataframe
setwd("/Users/mylesgartland/OneDrive - Rockhurst University/Courses/Forecasting/Time Series/time_series/time_series/Week 1")
cisco = read.table('Data/cisco_00-10.csv', header=T, sep=',')
# create time series for cisco prices
ciscots = zoo(cisco$Price, as.Date(as.character(cisco$Date), format = "%m/%d/%y"))
#To retrieve only dates use
head(time(ciscots))
# Retrieve start date
start(ciscots)
# Retrieve End date
end(ciscots)
setwd("/Users/mylesgartland/OneDrive - Rockhurst University/Courses/Forecasting/Time Series/time_series/time_series/Week 1")
library(tseries)
library(zoo)
#import dataset into a dataframe
#setwd("/Users/mylesgartland/OneDrive - Rockhurst University/Courses/Forecasting/Time Series/time_series/time_series/Week 1")
cisco = read.table('Data/cisco_00-10.csv', header=T, sep=',')
library(tseries)
library(zoo)
#import dataset into a dataframe
setwd("/Users/mylesgartland/OneDrive - Rockhurst University/Courses/Forecasting/Time Series/time_series/time_series/Week 1")
cisco = read.table('Data/cisco_00-10.csv', header=T, sep=',')
# create time series for cisco prices
ciscots = zoo(cisco$Price, as.Date(as.character(cisco$Date), format = "%m/%d/%y"))
#To retrieve only dates use
head(time(ciscots))
# Retrieve start date
start(ciscots)
# Retrieve End date
end(ciscots)
library(tseries)
library(zoo)
#import dataset into a dataframe
setwd("/Users/mylesgartland/OneDrive - Rockhurst University/Courses/Forecasting/Time Series/time_series/time_series/Week 1")
cisco = read.table('Data/cisco_00-10.csv', header=T, sep=',')
# create time series for cisco prices
ciscots = zoo(cisco$Price, as.Date(as.character(cisco$Date), format = "%m/%d/%y"))
#To retrieve only dates use
head(time(ciscots))
# Retrieve start date
start(ciscots)
# Retrieve End date
end(ciscots)
library(tseries)
library(zoo)
#import dataset into a dataframe
setwd("/Users/mylesgartland/OneDrive - Rockhurst University/Courses/Forecasting/Time Series/time_series/time_series/Week 1")
print("/n"")
cisco = read.table('Data/cisco_00-10.csv', header=T, sep=',')
# create time series for cisco prices
ciscots = zoo(cisco$Price, as.Date(as.character(cisco$Date), format = "%m/%d/%y"))
library(tseries)
library(zoo)
#import dataset into a dataframe
setwd("/Users/mylesgartland/OneDrive - Rockhurst University/Courses/Forecasting/Time Series/time_series/time_series/Week 1")
print("/n")
cisco = read.table('Data/cisco_00-10.csv', header=T, sep=',')
# create time series for cisco prices
ciscots = zoo(cisco$Price, as.Date(as.character(cisco$Date), format = "%m/%d/%y"))
#To retrieve only dates use
head(time(ciscots))
# Retrieve start date
start(ciscots)
# Retrieve End date
end(ciscots)
library(tseries)
library(zoo)
#import dataset into a dataframe
setwd("/Users/mylesgartland/OneDrive - Rockhurst University/Courses/Forecasting/Time Series/time_series/time_series/Week 1")
print("/n")
cisco = read.table('Data/cisco_00-10.csv', header=T, sep=',')
# create time series for cisco prices
ciscots = zoo(cisco$Price, as.Date(as.character(cisco$Date), format = "%m/%d/%y"))
#To retrieve only dates use
print("head of TS")
head(time(ciscots))
print("Retrieve start date")
start(ciscots)
print("Retrieve End date")
end(ciscots)
library(tseries)
library(zoo)
#import dataset into a dataframe
setwd("/Users/mylesgartland/OneDrive - Rockhurst University/Courses/Forecasting/Time Series/time_series/time_series/Week 1")
print("")
cisco = read.table('Data/cisco_00-10.csv', header=T, sep=',')
# create time series for cisco prices
ciscots = zoo(cisco$Price, as.Date(as.character(cisco$Date), format = "%m/%d/%y"))
#To retrieve only dates use
print("head of TS")
head(time(ciscots))
print("Retrieve start date")
start(ciscots)
print("Retrieve End date")
end(ciscots)
library(tseries)
library(zoo)
#import dataset into a dataframe
setwd("/Users/mylesgartland/OneDrive - Rockhurst University/Courses/Forecasting/Time Series/time_series/time_series/Week 1")
print("")
cisco = read.table('Data/cisco_00-10.csv', header=T, sep=',')
# create time series for cisco prices
ciscots = zoo(cisco$Price, as.Date(as.character(cisco$Date), format = "%m/%d/%y"))
class(ciscots)
#To retrieve only dates use
print("head of TS")
head(time(ciscots))
print("Retrieve start date")
start(ciscots)
print("Retrieve End date")
end(ciscots)
library(datasets)
data(AirPassengers)
AP <- AirPassengers
AP
#Attributes
class(AP)
length(AP)
start(AP)
end(AP)
summary(AP)
# The base "plot" command
plot(AP, main = "Plot command")
plot.ts(AP, main = "Plot.ts command")
library(forecast)
Mean <- meanf(AP, h=48)
class(Mean)
head(Mean)
Naive <- naive(AP, h=48)
class(Naive)
head(Naive)
Seasonal <- snaive(AP, h=48)
class(Seasonal)
Seasonal
Drift <- rwf(AP, drift=TRUE, h=48)
class(Drift)
head(Drift)
library(ggplot2)
autoplot(Mean)
plot(Mean)
plot(Naive)
plot(Seasonal)
plot(Drift)
plot(AP, plot.type="single", main="Simple Forecasts", ylab="Airline Passengers",ylim = c(50,750))
lines(Mean$mean, col = "blue")
lines(Naive$mean, col = "red")
lines(Seasonal$mean, col = "green")
lines(Drift$mean, lty = 2)
legend("topleft", legend=c("Mean","Naive","Seasonal","Drift"), col=c("blue", "red", "green"), lty = c(1,1,1,2))
#Dow jones daily data
library(fma)
dj <- dowjones
class(dj)
length(dj)
start(dj)
end(dj)
head(dj)
summary(dj)
plot(dj, main = "Dow Jones: 28 Aug - 18 Dec 1972")
plot(meanf(dj, h = 30), xlab = "Time", ylab = "Value $", main = "Dow Jones mean")
plot(naive(dj, h = 30), xlab = "Time", ylab = "Value $", main = "Dow Jones naive")
plot(snaive(dj, h = 30), xlab = "Time", ylab = "Value $", main = "Dow Jones seasonal")
plot(rwf(dj, drift = TRUE, h = 30), xlab = "Time", ylab = "Value $", main = "Dow Jones drift")
# All on one chart
plot(rwf(dj, drift=TRUE, h=30, level=0), xlab="Time", ylab="Value $", main="")
lines(naive(dj, h=30, level=0)$mean, xlab="", ylab="", main="", col="green")
lines(meanf(dj, h=30, level=0)$mean, xlab="", ylab="", main="", col="red")
legend("topleft",
legend = c("Drift", "Naive", "Mean"),
col = c("blue", "green", "red"), lty=1)
# CREATE NORMAL PROBABILITY PLOT
qqnorm(rt)
library(fBasics)
# COMPUTE SUMMARY STATISTICS
basicStats(rt)
library(tseries)
library(zoo)
#import dataset into a dataframe
setwd("/Users/mylesgartland/OneDrive - Rockhurst University/Courses/Forecasting/Time Series/time_series/time_series/Week 1")
print("")
cisco = read.table('Data/cisco_00-10.csv', header=T, sep=',')
# create time series for cisco prices
ciscots = zoo(cisco$Price, as.Date(as.character(cisco$Date), format = "%m/%d/%y"))
class(ciscots)
#To retrieve only dates use
print("head of TS")
head(time(ciscots))
print("Retrieve start date")
start(ciscots)
print("Retrieve End date")
end(ciscots)
# create lagged series using function lag(tsobject, k==1);
pricelag = lag(ciscots, k=-1);
head(pricelag)
# diff = p_t - p_(t-1);
pricedif = diff(ciscots);
#compute simple returns ret = (p_t-p_(t-1))/p_(t-1)
ret=(ciscots-pricelag)/pricelag
head(ret)
# sort data in chronological order
# set variable Date as time/date variable
cisco$Date=as.Date(as.character(cisco$Date), format = "%m/%d/%y")
cisco=cisco[order(cisco$Date),]
head(cisco)
#DEFINE LOG RETURNS
#rts is a time series object since it is created from a zoo object
rts = diff(log(ciscots))
print("Log Return")
head(rts)
print("")
#to retrieve numerical values from time series use coredata()
# rt is a numerical vector (no date information)
print("coredata")
rt=coredata(rts)
#print first 6 values
head(rt)
library(fBasics)
# COMPUTE SUMMARY STATISTICS
basicStats(rt)
# CREATE HISTOGRAM
# OPTIONAL creates 2 by 2 display for 4 plots
# par(mfcol=c(2,2))
hist(rt, xlab="Cisco log returns", prob=TRUE, main="Histogram")
# add approximating normal density curve
xfit<-seq(min(rt),max(rt),length=40)
yfit<-dnorm(xfit,mean=mean(rt),sd=sd(rt))
lines(xfit, yfit, col="blue", lwd=2)
# CREATE NORMAL PROBABILITY PLOT
qqnorm(rt)
qqline(rt, col = 2)
# CREATE TIME PLOTS
# simple plot where x-axis is not labeled with time
plot(rt)
# use time series object rts to draw time plot indexed with time
plot(rts)
# creates subsets of data for a certain period of time
rts_10 = window(rts, start = as.Date("2010-01-01"), end = as.Date("2010-12-31"))
# plot the new subset
plot(rts_10, type='l', ylab="log returns", main="Plot of 2010 data")
library(forecast)
library(ggplot2)
# ETS forecasts
USAccDeaths %>%
ets %>%
forecast %>%
autoplot
# Automatic ARIMA forecasts
WWWusage %>%
auto.arima %>%
forecast(h=20) %>%
autoplot
# ARFIMA forecasts
library(fracdiff)
x <- fracdiff.sim( 100, ma=-.4, d=.3)$series
arfima(x) %>%
forecast(h=30) %>%
autoplot
# Forecasting with STL
USAccDeaths %>%
stlm(modelfunction=ar) %>%
forecast(h=36) %>%
autoplot
decomp(AP)
decompose(AP)
library(ggplot2)
autoplot(Mean)
plot(Mean)
plot(Naive)
plot(Seasonal)
plot(Drift)
autoplot(AP)
library(ggplot2)
autoplot(Mean)
plot(Mean)
plot(Naive)
plot(Seasonal)
plot(Drift)
decompose(AP)
library(ggplot2)
autoplot(Mean)
plot(Mean)
plot(Naive)
plot(Seasonal)
plot(Drift)
(plotdecompose(AP))
library(ggplot2)
autoplot(Mean)
plot(Mean)
plot(Naive)
plot(Seasonal)
plot(Drift)
(plot(decompose(AP))
library(ggplot2)
autoplot(Mean)
plot(Mean)
plot(Naive)
plot(Seasonal)
plot(Drift)
plot(decompose(AP))
library(ggplot2)
autoplot(Mean)
plot(Mean)
plot(Naive)
plot(Seasonal)
plot(Drift)
decompose(AP)
library(ggplot2)
autoplot(Mean)
plot(Mean)
plot(Naive)
plot(Seasonal)
plot(Drift)
plot(decompose(AP))
library(ggplot2)
autoplot(Mean)
plot(Mean)
plot(Naive)
plot(Seasonal)
plot(Drift)
plot(decompose(AP))
decompose(AP)
View(cisco)
library(tseries)
library(zoo)
#import dataset into a dataframe
setwd("/Users/mylesgartland/OneDrive - Rockhurst University/Courses/Forecasting/Time Series/time_series/time_series/Week 1")
print("")
cisco = read.table('Data/cisco_00-10.csv', header=T, sep=',')
# create time series for cisco prices
ciscots = zoo(cisco$Price, as.Date(as.character(cisco$Date), format = "%m/%d/%y"))
class(ciscots)
#To retrieve only dates use
print("head of TS")
head(time(ciscots))
print("Retrieve start date")
start(ciscots)
print("Retrieve End date")
end(ciscots)
# sort data in chronological order
# set variable Date as time/date variable
cisco$Date=as.Date(as.character(cisco$Date), format = "%m/%d/%y")
cisco=cisco[order(cisco$Date),]
head(cisco)
library(fBasics)
# COMPUTE SUMMARY STATISTICS
basicStats(rt)
# CREATE HISTOGRAM
# OPTIONAL creates 2 by 2 display for 4 plots
# par(mfcol=c(2,2))
hist(rt, xlab="Cisco log returns", prob=TRUE, main="Histogram")
# add approximating normal density curve
xfit<-seq(min(rt),max(rt),length=40)
yfit<-dnorm(xfit,mean=mean(rt),sd=sd(rt))
lines(xfit, yfit, col="blue", lwd=2)
# CREATE NORMAL PROBABILITY PLOT
qqnorm(rt)
qqline(rt, col = 2)
# CREATE TIME PLOTS
# simple plot where x-axis is not labeled with time
plot(rt)
# use time series object rts to draw time plot indexed with time
plot(rts)
# creates subsets of data for a certain period of time
rts_10 = window(rts, start = as.Date("2010-01-01"), end = as.Date("2010-12-31"))
# plot the new subset
plot(rts_10, type='l', ylab="log returns", main="Plot of 2010 data")
library("gtrendsR", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
keywords=c("Paris","New York","Barcelona")
#set the geographic area: DE = Germany
country=c('DE')
#set the time window
time=("2010-01-01 2018-08-27")
#set channels
channel='web'
trends = gtrends(keywords, gprop =channel,geo=country, time = time )
#select only interst over time
time_trend=trends$interest_over_time
head(time_trend)
View(time_trend)
library(ggplot2)
plot<-ggplot(data=time_trend, aes(x=date, y=hits,group=keyword,col=keyword))+
geom_line()+xlab('Time')+ylab('Relative Interest')+ theme_bw()+
theme(legend.title = element_blank(),legend.position="bottom",legend.text=element_text(size=12))+ggtitle("Google Search Volume")
plot
time_trend2=time_trend[time_trend$hits<45,]
plot<-ggplot(data=time_trend2, aes(x=date, y=hits,group=keyword,col=keyword))+
geom_line()+xlab('Time')+ylab('Relative Interest')+ theme_bw()+
theme(legend.title = element_blank(),legend.position="bottom",legend.text=element_text(size=12))+ggtitle("Google Search Volume")
plot
